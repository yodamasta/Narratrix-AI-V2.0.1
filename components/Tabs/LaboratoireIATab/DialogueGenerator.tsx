import React, { useState } from 'react';
import { BibleData } from '../../../types';
import { CharacterOption, AIToolSection, AIOutputDisplay, buildCharacterContextForPrompt } from './common';
import Button from '../../UI/Button';
import Loader from '../../UI/Loader';
import { generateText, isGeminiApiKeyAvailable } from '../../../services/geminiService';
import { API_KEY_ERROR_MESSAGE } from '../../../constants';

interface DialogueGeneratorProps {
  bibleData: BibleData | null;
  characterOptions: CharacterOption[];
  onSetStatusMessage: (message: string, isError?: boolean) => void;
  onBack?: () => void; 
}

const DialogueGenerator: React.FC<DialogueGeneratorProps> = ({ bibleData, characterOptions, onSetStatusMessage, onBack }) => {
  const [situation, setSituation] = useState('');
  const [char1, setChar1] = useState('');
  const [char2, setChar2] = useState('');
  const [generatedDialogue, setGeneratedDialogue] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const isApiKeyAvail = isGeminiApiKeyAvailable();

  const dialogCharacterOptions = [{ value: '', label: 'Choisir personnage...' }, ...characterOptions.filter(opt => opt.value !== '')];

  const selectClasses = "w-full p-3 border border-slate-300 dark:border-slate-600 rounded-lg focus:ring-2 focus:ring-green-500 dark:focus:ring-green-400 text-slate-700 dark:text-slate-200 bg-white dark:bg-slate-700 disabled:opacity-60 dark:disabled:bg-slate-700/50";
  const textAreaClasses = "w-full p-3 border border-slate-300 dark:border-slate-600 rounded-lg focus:ring-2 focus:ring-green-500 dark:focus:ring-green-400 text-slate-700 dark:text-slate-200 bg-white dark:bg-slate-700 disabled:opacity-60 dark:disabled:bg-slate-700/50";


  const handleGenerateDialogue = async () => {
    if (!bibleData) {
      onSetStatusMessage("Chargez une Bible pour utiliser cet outil.", true);
      return;
    }
    if (!isApiKeyAvail) {
        onSetStatusMessage(API_KEY_ERROR_MESSAGE, true);
        return;
    }
    if (!situation.trim() || !char1 || !char2) {
      onSetStatusMessage("Veuillez s√©lectionner deux personnages et d√©crire une situation.", true);
      return;
    }
    if (char1 === char2) {
      onSetStatusMessage("Veuillez s√©lectionner deux personnages diff√©rents.", true);
      return;
    }

    setIsLoading(true);
    setGeneratedDialogue(null);
    onSetStatusMessage("G√©n√©ration du dialogue en cours...", false);

    const char1Data = characterOptions.find(opt => opt.value === char1);
    const char2Data = characterOptions.find(opt => opt.value === char2);

    const prompt = `
Contexte de l'univers:
Titre du projet: ${bibleData.projectInfo?.title || 'N/A'}
Pitch global: ${bibleData.pitchSection?.pitchGlobal || 'N/A'}
Ambiance sp√©cifique: ${bibleData.pitchSection?.ambianceSpecifique || 'N/A'}

Personnages impliqu√©s:
1. ${char1Data?.label || char1}:
   - Description (pour IA visuelle): ${char1Data?.promptDescription || 'Non fournie'}
2. ${char2Data?.label || char2}:
   - Description (pour IA visuelle): ${char2Data?.promptDescription || 'Non fournie'}

Situation pour le dialogue:
"${situation}"

Instructions pour l'IA:
G√©n√®re un dialogue concis (environ 4-8 r√©pliques au total, altern√©es) entre ${char1} et ${char2} bas√© sur la situation et leurs profils (utiliser les descriptions si elles aident √† d√©finir leur ton/personnalit√©).
Le dialogue doit refl√©ter leurs personnalit√©s distinctes, leurs relations possibles, et l'ambiance de l'univers.
Formate le dialogue clairement en utilisant le nom du personnage suivi de deux-points puis sa r√©plique. Chaque r√©plique sur une nouvelle ligne. Par exemple:
${char1}: [R√©plique de ${char1}]
${char2}: [R√©plique de ${char2}]
...
Assure-toi que les r√©pliques soient naturelles et cr√©dibles pour chaque personnage.
Ne pas ajouter de descriptions d'action, de mise en sc√®ne, ou de commentaires m√©ta, juste le dialogue pur.
Commence directement par la premi√®re r√©plique.`;

    const systemInstruction = `Tu es un sc√©nariste talentueux capable de cr√©er des dialogues percutants. Les personnages principaux du dialogue sont ${char1} et ${char2}.`;

    try {
      const dialogue = await generateText(prompt, systemInstruction, true); 
      setGeneratedDialogue(dialogue);
      onSetStatusMessage("Dialogue g√©n√©r√© avec succ√®s !", false);
    } catch (error: any) {
      console.error("Erreur g√©n√©ration dialogue:", error);
      onSetStatusMessage(`Erreur dialogue: ${error.message}`, true);
    } finally {
      setIsLoading(false);
    }
  };
  
  const fileNameForDownload = () => {
    const c1Name = characterOptions.find(c => c.value === char1)?.label.replace(/\s/g, '_') || 'char1';
    const c2Name = characterOptions.find(c => c.value === char2)?.label.replace(/\s/g, '_') || 'char2';
    return `dialogue_${c1Name}_${c2Name}.txt`;
  };

  return (
    <AIToolSection title="Explorateur de Prompts Cr√©atifs (Dialogues) üí¨" onBack={onBack}> 
      <p className="text-sm text-slate-600 dark:text-slate-300 mb-4">S√©lectionnez deux personnages, d√©crivez une situation, et l'IA proposera un dialogue.</p>
      <div className="grid grid-cols-1 sm:grid-cols-2 gap-x-6 gap-y-4 mb-4 items-end">
        <div>
            <label htmlFor="dialogueChar1Select" className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-1">Personnage 1:</label>
            <select id="dialogueChar1Select" value={char1} onChange={(e) => setChar1(e.target.value)} className={selectClasses} disabled={isLoading || !isApiKeyAvail}>
            {dialogCharacterOptions.map(opt => <option key={`dgc1-${opt.value}`} value={opt.value}>{opt.label}</option>)}
            </select>
        </div>
        <div>
            <label htmlFor="dialogueChar2Select" className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-1">Personnage 2:</label>
            <select id="dialogueChar2Select" value={char2} onChange={(e) => setChar2(e.target.value)} className={selectClasses} disabled={isLoading || !isApiKeyAvail}>
            {dialogCharacterOptions.map(opt => <option key={`dgc2-${opt.value}`} value={opt.value}>{opt.label}</option>)}
            </select>
        </div>
      </div>
      <div className="mt-4 mb-4">
        <label htmlFor="dialogueSituationInput" className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-1">Situation / Contexte du dialogue:</label>
        <textarea
            id="dialogueSituationInput"
            value={situation}
            onChange={(e) => setSituation(e.target.value)}
            placeholder="Ex: Personnage 1 confronte Personnage 2 √† propos d'un objet vol√©..."
            rows={3}
            className={textAreaClasses}
            disabled={isLoading || !isApiKeyAvail}
        />
      </div>
      <Button onClick={handleGenerateDialogue} isLoading={isLoading} disabled={isLoading || !bibleData || !isApiKeyAvail} icon="forum" variant="success" className="w-full sm:w-auto bg-green-600 hover:bg-green-700 dark:bg-green-500 dark:hover:bg-green-600 focus:ring-green-500 dark:focus:ring-green-400">
        G√©n√©rer Dialogue
      </Button>
      {!isApiKeyAvail && <p className="text-xs text-red-500 dark:text-red-400 mt-1">{API_KEY_ERROR_MESSAGE}</p>}

      {isLoading && <Loader message="G√©n√©ration du dialogue..." />}
      <AIOutputDisplay 
        textToCopy={generatedDialogue} 
        onCopyStatus={onSetStatusMessage}
        fileNameGenerator={fileNameForDownload}
      >
        {generatedDialogue ? 
            <div className="whitespace-pre-line">{generatedDialogue}</div> 
            : (!isLoading && <p className="italic">Le dialogue g√©n√©r√© appara√Ætra ici.</p>)
        }
      </AIOutputDisplay>
    </AIToolSection>
  );
};

export default DialogueGenerator;